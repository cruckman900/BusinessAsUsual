@inherits LayoutComponentBase
@implements IDisposable

@inject NavigationManager Nav
@inject IJSRuntime JS

<CascadingValue Value="ActiveSidebarSection">
    <div class="layout-grid @(isDark ? "dark" : "light") @(sidebarOpen ? "" : "sidebar-collapsed")">
        <Header IsDark="@isDark" />
        <Navbar IsDark="@isDark" OnSectionSelected="SetSidebarSection" OnToggleSidebar="@ToggleSidebar" SidebarLabel="@(sidebarOpen ? "🡸 Collapse Sidebar" : "🡺 Expand Sidebar")" />
        @if (sidebarOpen)
        {
            <div class="sidebar @(sidebarOpen ? "expanded" : "collapsed")">
                <Sidebar IsDark="@isDark" />
            </div>
        }
        <main class="main-zone p-4">
            @Body
            <button class="btn btn-primary" @onclick="TestClick">Click Me</button>

            <p>@clickedText</p>
        </main>
        <Footer IsDark="@isDark" />
    </div>
</CascadingValue>

@code {
    private string clickedText = "Not clicked";

    private void TestClick()
    {
        clickedText = "Clicked!";
    }

    private bool isDark = true;
    private bool sidebarOpen = true;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JS.InvokeVoidAsync("toggleBootstrapTheme", isDark);
        }
    }

    private string ActiveSidebarSection = "Main";

    protected override void OnInitialized()
    {
        Nav.LocationChanged += HandleLocationChanged;
    }

    private void HandleLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        var uri = e.Location;

        if (uri.Contains("/about"))
            ActiveSidebarSection = "About";
        else if (uri.Contains("/human-resources") || uri.Contains("/employees") || uri.Contains("/departments"))
            ActiveSidebarSection = "HR";
        else if (uri.EndsWith('/'))
            ActiveSidebarSection = "Main";

        StateHasChanged();
    }

    public void Dispose() => Nav.LocationChanged -= HandleLocationChanged;

    private void SetSidebarSection(string section)
    {
        ActiveSidebarSection = section;
    }

    public void ToggleTheme()
    {
        isDark = !isDark;
        JS.InvokeVoidAsync("toggleBootstrapTheme", isDark);
    }

    public void ToggleSidebar() => sidebarOpen = !sidebarOpen;
}