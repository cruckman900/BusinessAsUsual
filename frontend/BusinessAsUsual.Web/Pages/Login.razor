@page "/login"
@using BusinessAsUsual.Web.Services

@inject NavigationManager Nav
@inject CompanySession Session

<h3>Login</h3>

<input @bind="DatabaseName" placeholder="Enter company DB name" />
@if (ShowValidationMessage)
{
    <p class="text-danger">Please enter a database name.</p>
}
@* <button class="btn btn-primary ml-2" @onclick="HandleLogin">Login</button> *@
<button @onclick="TestClick">Test Click</button>

@code {
    // S2933: Make 'DatabaseName' 'readonly'.
    // This cannot be made readonly because it is mutated by @bind.
    // To resolve the diagnostic, suppress the warning for this field.
#pragma warning disable S2933 // Field should be readonly
    private string? DatabaseName = string.Empty; // Cannot be readonly because it is mutated by @bind
#pragma warning restore S2933

    private bool ShowValidationMessage = false;

    private void TestClick()
    {
        try
        {
            System.Diagnostics.Debug.WriteLine("✅ TestClick method invoked");            
        }
        catch (Exception ex)
        {
            System.Diagnostics.Debug.WriteLine($"❌ Error in TestClick: {ex.Message}");
        }
    }

    private async Task HandleLogin()
    {
        try
        {
            await Task.CompletedTask; // ✅ satisfies async requirement
            System.Diagnostics.Debug.WriteLine("in handle login");

            if (!string.IsNullOrWhiteSpace(DatabaseName))
            {
                ShowValidationMessage = false;
                System.Diagnostics.Debug.WriteLine($"🔐 Logging in with DB: {DatabaseName}");
                Session.SetDatabase(DatabaseName);
                Nav.NavigateTo("/", true);
            }
            else
            {
                ShowValidationMessage = true;
                System.Diagnostics.Debug.WriteLine("⚠️ No DB name entered.");
            }
        }
        catch (Exception ex)
        {
            System.Diagnostics.Debug.WriteLine($"❌ Error in Login HandleClick: {ex.Message}");
        }
    }
}