version: '3.8'

services:
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    depends_on:
      - backend
      - admin

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "5000:80"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - AWS_SQL_CONNECTION_STRING=Server=db;User Id=sa;Password=YourStrong!Password123;Database=TestDb;
    working_dir: /app
    depends_on:
      db:
        condition: service_healthy

  admin:
    build:
      context: .
      dockerfile: BusinessAsUsual.Admin/Dockerfile
    ports:
      - "8080:80"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - AWS_SQL_CONNECTION_STRING=Server=db;User Id=sa;Password=YourStrong!Password123;Database=TestDb;
    working_dir: /app
    volumes:
      - ./.env:/app/.env
    depends_on:
      - db

  runtime:
    build:
      context: .
      dockerfile: Dockerfile.runtime.build
    ports:
      - "5001:80"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - AWS_SQL_CONNECTION_STRING=Server=db;User Id=sa;Password=YourStrong!Password123;Database=TestDb;
    working_dir: /app
    volumes:
      - ./.env:/app/.env
    depends_on:
      db:
        condition: service_healthy

  tests:
    build:
      context: .
      dockerfile: Dockerfile.test
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - AWS_SQL_CONNECTION_STRING=Server=db;User Id=sa;Password=YourStrong!Password123;Database=TestDb;
    working_dir: /app
    depends_on:
      db:
        condition: service_healthy
      backend:
        condition: service_started
      admin:
        condition: service_started
    command: ["/bin/sh", "-c", "echo 'ðŸ§ª Starting tests with env:' && env && dotnet test BusinessAsUsual.Tests/BusinessAsUsual.Tests.csproj --no-build --settings TestConfig.runsettings"]

  db:
    build:
      context: .
      dockerfile: Dockerfile.db
    expose:
      - "1433"
    environment:
      - ACCEPT_EULA=Y
      - SA_PASSWORD=YourStrong!Password123
    restart: always
    volumes:
      - ./init.sql:/init.sql
      - mssql_data:/var/opt/mssql
    command: /opt/mssql/bin/sqlservr
    healthcheck:
      test: ["CMD-SHELL", "bash -c '</dev/tcp/localhost/1433' || exit 1"]
      interval: 10s
      timeout: 10s
      retries: 30

  initdb:
    build:
      context: .
      dockerfile: Dockerfile.db
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - ./init.sql:/init.sql
    entrypoint: ["/bin/bash", "-c", "sleep 10 && /opt/mssql-tools/bin/sqlcmd -S db -U sa -P 'YourStrong!Password123' -i /init.sql"]
  
volumes:
  mssql_data: